[{"D:\\GitHub\\Tweb-Asadullin_Nicolae\\lab-4\\src\\index.tsx":"1","D:\\GitHub\\Tweb-Asadullin_Nicolae\\lab-4\\src\\reportWebVitals.ts":"2","D:\\GitHub\\Tweb-Asadullin_Nicolae\\lab-4\\src\\App.tsx":"3","D:\\GitHub\\Tweb-Asadullin_Nicolae\\lab-4\\src\\Layouts.tsx":"4","D:\\GitHub\\Tweb-Asadullin_Nicolae\\lab-4\\src\\components\\CustomForm.tsx":"5"},{"size":248,"mtime":1650454714000,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1648748360000,"results":"8","hashOfConfig":"9"},{"size":341,"mtime":1650454714000,"results":"10","hashOfConfig":"7"},{"size":1629,"mtime":1650454714000,"results":"11","hashOfConfig":"7"},{"size":2414,"mtime":1651603729842,"results":"12","hashOfConfig":"7"},{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ohbpt",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"120wkw6",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"D:\\GitHub\\Tweb-Asadullin_Nicolae\\lab-4\\src\\index.tsx",[],[],"D:\\GitHub\\Tweb-Asadullin_Nicolae\\lab-4\\src\\reportWebVitals.ts",[],[],"D:\\GitHub\\Tweb-Asadullin_Nicolae\\lab-4\\src\\App.tsx",[],[],"D:\\GitHub\\Tweb-Asadullin_Nicolae\\lab-4\\src\\Layouts.tsx",["29"],[],"D:\\GitHub\\Tweb-Asadullin_Nicolae\\lab-4\\src\\components\\CustomForm.tsx",["30","31"],[],"import { Form, Input, Select, Checkbox, Button } from 'antd';\nimport { useState } from 'react';\nimport './CustomForm.css';\n\nconst { Option } = Select;\n\nexport function CustomForm() {\n  const [nick, setNick] = useState('');\n  const [phone, setPhone] = useState('');\n\n\n  const onSubmit = (values: any) => {\n    console.log(values);\n    alert(`${nick} ${phone} `);\n  };\n\n  return (\n    <Form\n      style={{ width: '30%', margin: '0 auto' }}\n      onFinish={onSubmit}\n      scrollToFirstError\n    >\n      <Form.Item\n        name=\"Name\"\n        label=\"Name\"\n        rules={[\n          {\n            required: true,\n            message: 'Required field',\n            whitespace: true,\n          },\n        ]}\n      >\n        <Input onChange={(e) => setNick(e.target.value)} />\n      </Form.Item>\n\n      <Form.Item\n        name=\"Password\"\n        label=\"Password\"\n        rules={[{ required: true, message: 'Required field' }]}\n        hasFeedback\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item\n        name=\"Confirm\"\n        label=\"Confirm your password\"\n        dependencies={['Password']}\n        hasFeedback\n        rules={[\n          { required: true, message: 'Required field' },\n          ({ getFieldValue }) => ({\n            validator(_, value) {\n              if (!value || getFieldValue('Password') === value) {\n                return Promise.resolve();\n              }\n\n              return Promise.reject(\n\n              );\n            },\n          }),\n        ]}\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item\n        name=\"email\"\n        label=\"email\"\n        rules={[\n          { type: 'email', message: 'Invalid mail' },\n          { required: true, message: 'Required field!' },\n        ]}\n      >\n        <Input onChange={(e) => setPhone(e.target.value)} />\n      </Form.Item>\n\n      <Form.Item\n        name=\"Tel.\"\n        label=\"Tel.\"\n        rules={[{ required: true, message: 'Required field!' }]}\n      >\n        <Input style={{ width: '100%' }} />\n      </Form.Item>\n\n      <Form.Item\n        name=\"Comment\"\n        label=\"Comment\"\n        rules={[{ message: 'Your Comment' }]}\n      >\n        <Input.TextArea showCount maxLength={100} />\n      </Form.Item>\n\n\n\n      <Form.Item\n\n\n      >\n\n      </Form.Item>\n\n      <Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Send\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n}\n",{"ruleId":"32","severity":1,"message":"33","line":60,"column":13,"nodeType":"34","endLine":60,"endColumn":24},{"ruleId":"35","severity":1,"message":"36","line":1,"column":31,"nodeType":"37","messageId":"38","endLine":1,"endColumn":39},{"ruleId":"35","severity":1,"message":"39","line":5,"column":9,"nodeType":"37","messageId":"38","endLine":5,"endColumn":15},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","@typescript-eslint/no-unused-vars","'Checkbox' is defined but never used.","Identifier","unusedVar","'Option' is assigned a value but never used."]